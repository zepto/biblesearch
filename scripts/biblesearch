#!/usr/bin/env python
# vim: sw=4:ts=4:sts=4:fdm=indent:fdl=0:
# -*- coding: UTF8 -*-
#
# A sword KJV indexed search module.
# Copyright (C) 2012 Josiah Gordon <josiahg@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from argparse import ArgumentParser

from sword_search import *


def main(arg_list, **kwargs):
    """ Takes a string of arguments, and a bunch of keyword arguments.

    """

    info_print("\nProcessing arguments...\n", tag=2)
    module_name = kwargs['module_name']

    # Build the index.
    if kwargs['build_index']:
        indexer = IndexBible(module=module_name)
        indexer.write_index()
        exit()

    # Make an argument string.
    arg_str = ' '.join(arg_list)

    # Get the search related arguments.
    search_type = kwargs['search_type']
    strongs_search = kwargs['search_strongs']
    morph_search = kwargs['search_morphology']
    search_added = kwargs['search_added']
    case_sensitive = kwargs['case_sensitive']
    search_range = kwargs['search_range']

    # Get the lookup related arguments
    lookup = kwargs['verse_reference']
    define_strongs = kwargs['numbers']
    define_morph = kwargs['tags']
    define_word = kwargs['words']
    define_kjv_word = kwargs['kjv_words']
    daily = kwargs['day']

    # Set the highlight to nothing.
    highlight_list = []

    if kwargs['raw']:
        raw_lookup = Lookup(module_name=module_name)
        strongs = 'On' if kwargs['show_numbers'] else 'Off'
        morph = 'On' if kwargs['show_tags'] else 'Off'
        raw_lookup._library.setGlobalOption("Strong's Numbers", strongs)
        raw_lookup._library.setGlobalOption("Morphological Tags", morph)
        for i in sorted(parse_verse_range(arg_list), key=sort_key):
            info_print('%s\n' % raw_lookup.get_raw_text(i))
            print('%s\n' % raw_lookup.get_text(i))
        exit()
    elif lookup:
        # Lookup verses in the argument string.
        results = parse_verse_range(lookup)
    elif define_strongs:
        # Lookup all the Strong's Numbers in the argument list.
        # Make all the numbers seperated by a comma.
        strongs_list = ','.join(define_strongs.upper().split()).split(',')
        #TODO: Find what Strong's Modules are available and use the best,
        #      or let the user decide.
        greek_strongs_lookup = Lookup('StrongsRealGreek')
        hebrew_strongs_lookup = Lookup('StrongsRealHebrew')
        for strongs_num in strongs_list:
            # Greek Strong's Numbers start with a 'G' and Hebrew ones start
            # with an 'H.'
            if strongs_num.upper().startswith('G'):
                mod_name = 'StrongsRealGreek'
            else:
                mod_name = 'StrongsRealHebrew'
            print('%s\n' % mod_lookup(mod_name, strongs_num[1:]))
        exit()
    elif define_morph:
        # Lookup all the Morphological Tags in the argument list.
        # I don't know how to lookup Hebrew morphological tags, so I
        # only lookup Greek ones in 'Robinson.'
        print('%s\n' % mod_lookup('Robinson', define_morph.upper()))
        exit()
    elif define_word:
        # Lookup words in the dictionary.
        print('%s\n' % mod_lookup('WebstersDict', define_word))
        exit()
    elif define_kjv_word:
        # Lookup words in the KJV dictionary.
        print('%s\n' % mod_lookup('KJVD', define_kjv_word))
        exit()
    elif daily:
        # Lookup the specified daily devotional.
        if daily.lower() == 'today':
            # Today is an alias for today's date.
            daily = strftime('%m.%d')
        daily_lookup = Lookup('Daily')
        # Try to make the output nicer.
        print(daily_lookup.get_formatted_text(daily))
        exit()
    else:
        if not arg_list:
            import readline
            histfile = os.path.join(INDEX_PATH, 'search_hist')
            try:
                readline.read_history_file(histfile)
            except IOError:
                pass
            import atexit
            atexit.register(readline.write_history_file, histfile)
            del histfile
            cmd_line = SearchCmd(module=module_name)
            try:
                cmd_line.cmdloop()
            except:
                pass
            print('\nGoodbye.\n')
            exit()

        # Perform the specified search.
        search = Search(module=module_name)

        extras = ()

        # Use the Sword modules search capabilities.
        if search_type.startswith('sword_'):
            extras = (search_type[6:],)
            search_type = search_type[:5]
            highlight_list = arg_list

        try:
            # Get the search function asked for.
            search_func = getattr(search, '%s_search' % search_type)
        except AttributeError as err:
            # An invalid search type was specified.
            print("Invalid search type: %s" % search_type, file=sys.stderr)
            exit()

        # Search.
        results = search_func(arg_list, strongs_search, morph_search,
                              search_added, case_sensitive, search_range,
                              *extras)

    count = len(results)
    info_print("\nFound %s verse%s.\n" % (count, 's' if count != 1 else ''),
               tag=-10)

    if kwargs['quiet']:
        # Only the verse count was given.
        exit()
    elif kwargs['list_only']:
        # Print a sorted list of references.
        print('\n'.join(sorted(results, key=sort_key)))
        exit()
    else:
        if search_type in ['combined', 'combined_phrase']:
            # Combined searches are complicated.
            # Parse the search argument and build a highlight string from the
            # result.
            arg_parser = CombinedParse(arg_str)
            parsed_args = arg_parser.word_list
            not_l = arg_parser.not_list
            # Remove any stray '+'s.
            #highlight_str = highlight_str.replace('|+', ' ')
            if search_type == 'combined_phrase':
                # A phrase search needs to highlight phrases.
                highlight_list = parsed_args
            else:
                highlight_list = ' '.join(parsed_args).split()
        # Build the highlight string for the other searches.
        elif search_type in ['anyword', 'multiword', 'eitheror',
                             'partial_word']:
            # Highlight each word separately.
            highlight_list = arg_str.split()
        elif search_type == 'mixed':
            # In mixed search phrases are in quotes so the arg_list should be
            # what we want, but don't include any !'ed words.
            highlight_list = [i for i in arg_list if not i.startswith('!')]
        elif search_type in ['phrase', 'mixed_phrase', 'ordered_multiword']:
            # Phrases should highlight phrases.
            highlight_list = [arg_str]
        #elif search_type == 'partialword':
            #for part in arg_str.split():
                #highlight_list.append('\w*%s\w' % part)

        if lookup:
            # Highlight anything else the user typed in.
            highlight_list = arg_list

        # Don't modify regular expression searches.
        if search_type != 'regex':
            regx_list = build_highlight_regx(highlight_list, case_sensitive,
                        (search_type == 'ordered_multiword'))
            if kwargs['context']:
                regx_list.extend(build_highlight_regx(results, case_sensitive))
        else:
            regx_list = [re.compile(arg_str, re.I if case_sensitive else 0)]

        # Get the output arguments.
        show_strongs = kwargs['show_numbers'] or strongs_search
        show_morph = kwargs['show_tags'] or morph_search
        # Flags for the highlight string.
        flags = re.I if not case_sensitive else 0
        # Add the specified number of verses before and after to provide
        # context.
        context_results = sorted(add_context(results, kwargs['context']),
                                 key=sort_key)
        # Get a formated verse string generator.
        verse_gen = render_verses_with_italics(context_results,
                                               not kwargs['one_line'],
                                               show_strongs, show_morph,
                                               search_added,
                                               kwargs['show_notes'],
                                               highlight_search_terms,
                                               module_name, regx_list, flags)
        if kwargs['one_line']:
            # Print it all on one line.
            print('  '.join(verse_gen))
        else:
            # Print the verses on seperate lines.
            print('\n'.join(verse_gen))


if __name__ == '__main__':
    parser = ArgumentParser(description="Bible search.")
    parser.add_argument('-m', '--module', action='store', default='KJV',
                        help='Module to search/index.',
                        dest='module_name')
    parser.add_argument('-i', '--index', action='store_true', default=False,
                        help='(Re-)build the search index.',
                        dest='build_index')
    parser.add_argument('-s', '--search-type', action='store', default='mixed',
            help='Valid search types are: phrase, multiword, anyword, \
                 eitheror, mixed, mixed_phrase, ordered_multiword, regex, \
                 combined, combined_phrase, sword, sword_phrase, \
                 sword_multiword, sword_entryattrib, and sword_lucene. \
                 (default: mixed)',
            dest='search_type')
    parser.add_argument('-S', '--strongs', action='store_true', default=False,
                        help='Search for strongs numbers. \
                             (Ignored in mixed search)',
                        dest='search_strongs')
    parser.add_argument('-M', '--morph', action='store_true', default=False,
                        help='Search for morphological tags. \
                             (Ignored in mixed search)',
                        dest='search_morphology')
    parser.add_argument('-C', '--case', action='store_true', default=False,
                        help='Case sensitive. (Ignored in regex search)',
                        dest='case_sensitive')
    parser.add_argument('-R', '--range', action='store', default='',
                        help='Range to search in...', dest='search_range')
    parser.add_argument('-x', '--raw', action='store_true', default=False,
                        help='Get the raw text of verses by reference.',
                        dest='raw')
    parser.add_argument('-l', '--lookup', action='store', default='',
                        help='Lookup a comma seperated list of verse \
                             references.',
                        dest='verse_reference')
    parser.add_argument('-d', '--daily', action='store',
                      default='', help='Lookup the devotional in \
                            Bagsters Daily light.', dest='day')
    parser.add_argument('--lookup-strongs', action='store', default='',
                        help="A comma seperated list of Strong's Numbers to \
                              lookup.", dest='numbers')
    parser.add_argument('--lookup-morphology', action='store', default='',
                        help='A comma seperated list of Morphological Tags to \
                              lookup.', dest='tags')
    parser.add_argument('--lookup-webster', action='store', default='',
                        help='A comma seperated list of words to lookup in \
                              websters dictionary.', dest='words')
    parser.add_argument('--lookup-kjvd', action='store', default='',
                        help='A comma seperated list of words to lookup in \
                              kjv dictionary.', dest='kjv_words')
    parser.add_argument('--one-line', action='store_true', default=False,
                        help='Print all the verses on one line.',
                        dest='one_line')
    parser.add_argument('--context', action='store', default=0, type=int,
                        help='The number of verses before and after the match\
                              to include in the output.',
                        dest='context')
    parser.add_argument('-a', '--added', action='store_false', default=True,
                        help="Show/search the added text (italics) default is \
                                True.",
                              dest='search_added')
    parser.add_argument('--notes', action='store_true', default=False,
                        help="Show study notes.", dest='show_notes')
    parser.add_argument('-n', '--numbers', action='store_true', default=False,
                        help="Include the Strong's numbers in the verse \
                              output.", dest='show_numbers')
    parser.add_argument('-t', '--tags', action='store_true', default=False,
                        help="Include the Morphological tags in the verse \
                              output.", dest='show_tags')
    parser.add_argument('-r', '--verse_ref', action='store_true',
                        default=False,
                        help='Show only a sorted list of references',
                        dest='list_only')
    parser.add_argument('-c', '--color_output', action='store', default=3,
                        help='How much to color. (-1 == nothing, 0 == verse \
                              references, 1 == italics, 2 == attributes, \
                              3 == highlight)',
                        dest='color_level')
    parser.add_argument('-q', '--quiet', action='store_true', default=False,
                        help='Only print the number of verses found.',
                        dest='quiet')
    parser.add_argument('-v', '--verbose', action='store', default=1,
                        help='Print more information.',
                        dest='verbose_level')
    parser.add_argument(dest='search_terms', nargs='*')

    args = parser.parse_args()
    try:
        VERBOSE_LEVEL = int(args.verbose_level)
    except Exception as err:
        print("Invalid verbose level '%s': %s" % (args.verbose_level, err),
              file=sys.stderr)
        VERBOSE_LEVEL = 1
    try:
        COLOR_LEVEL = int(args.color_level)
    except Exception as err:
        print("Invalid color level '%s': %s" % (args.verbose_level, err),
              file=sys.stderr)
        COLOR_LEVEL = 3

    def stdout_to_stderr(data):
        """ Write data to stderr.

        """

        sys.stderr.write(data)
        sys.stderr.flush()

    #with StdoutRedirect(stdout_to_stderr):
    main(args.search_terms, **args.__dict__)
    re.purge()
